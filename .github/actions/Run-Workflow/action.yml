name: 'Run Workflow'
description: 'Sends a workfow-dispatch event to a github workflow.'
inputs:
  repo:
    description: 'format: {owner}/{name}'
    required: true
  workflow:
    description: 'workflow yml filename'
    required: true
  ref:
    description: 'the ref to invoke the workflow at'
    required: true
  goal:
    description: 'A goal to wait for before exiting. Options are start, complete, and success. The drfault is start.'
    required: false
    defailt: 'start'
  access_token:
    description: 'GitHub access token to use to access repo'
    required: true
  wait_name_filter:
    description: 'The run must have this text in its name, blank to not filter'
    required: false
  field1:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field2:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field3:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field4:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field5:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field16:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field7:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field8:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field9:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  field10:
    description: 'a field to send to the workflow in the form name=value'
    required: false
  debug:
    description: 'display detailed results when value is "true"'
    required: false
runs:
  using: "composite"
  steps:
    - name: Set Values
      shell: bash
      id: set_values
      run: |
        echo name: "${{ inputs.repo }}"
        echo workflow: "${{ inputs.workflow }}"
        echo ref: "${{ inputs.ref }}"
        echo goal: "${{ inputs.goal }}"
        echo wait name filter: "${{ inputs.wait_name_filter }}"
        if [ -n "${{ inputs.debug }}" ] ; then
          echo debug: "${{ inputs.debug }}"
        fi
        echo ""
        fields="${{ inputs.field1 && format('-f {0} ', inputs.field1) || '' }}"
        fields+="${{ inputs.field2 && format('-f {0} ', inputs.field2) || '' }}"
        fields+="${{ inputs.field3 && format('-f {0} ', inputs.field3) || '' }}"
        fields+="${{ inputs.field4 && format('-f {0} ', inputs.field4) || '' }}"
        fields+="${{ inputs.field5 && format('-f {0} ', inputs.field5) || '' }}"
        fields+="${{ inputs.field6 && format('-f {0} ', inputs.field6) || '' }}"
        fields+="${{ inputs.field7 && format('-f {0} ', inputs.field7) || '' }}"
        fields+="${{ inputs.field8 && format('-f {0} ', inputs.field8) || '' }}"
        fields+="${{ inputs.field9 && format('-f {0} ', inputs.field9) || '' }}"
        fields+="${{ inputs.field10 && format('-f {0} ', inputs.field10) || '' }}"
        echo "fields=${fields}"
        echo "fields=${fields}" >> "$GITHUB_OUTPUT"
        echo ""
        # timestamp just before the workflow is started
        echo "startTime=$(date -u +%FT%TZ)"
        echo "startTime=$(date -u +%FT%TZ)" >> "$GITHUB_OUTPUT"
    - name: Run Workflow
      shell: bash
      run: |
        echo gh workflow run "${{ inputs.workflow }}" --repo "${{ inputs.repo }}" --ref "${{ inputs.ref }}" ${{ steps.set_values.outputs.fields }}
        gh workflow run "${{ inputs.workflow }}" --repo "${{ inputs.repo }}" --ref "${{ inputs.ref }}" ${{ steps.set_values.outputs.fields }}
        if [[ "$?" != 0 ]]; then
          printf "${RED}%s\n${NC}" "*** ERROR: Failed to run workflow"
          exit 1
        fi
    - name: Await Workflow
      shell: bash
      continue-on-error: true
      if: ${{ inputs.goal == 'complete' || inputs.goal == 'success' }}
      run: |
        fieldlist="conclusion,createdAt,databaseId,event,headBranch,headSha,name,status,updatedAt,url,workflowDatabaseId"
        isFinished=0
        until [ $isFinished -gt 0 ] ; do
          echo "$(date -u +%T) UTC: Waiting 30 seconds to check workflow status ..."
          sleep 30s
          runData="$(gh run list --repo "${{ inputs.repo }}" --json "${fieldlist}" --workflow ${{ inputs.workflow }} --limit 1 || echo "gh failed")"
          if [ "${{ inputs.debug }}" = "true" ] ; then
            echo "goal: ${{ inputs.goal }}"
            echo "ref: ${{ inputs.ref }}"
            if [ "$runData" = "gh failed" ] ; then
              echo "runData: $runData"
            else
              echo "runData:"
              echo "$runData" | jq .
              echo ""
              echo "runData.name:"
              echo "$runData" | jq '[.[] | .name?]'
              echo ""
              echo "runData.name.contains(Build):"
              echo "$runData" | jq \
              '[.[] | select(.name | contains("Build"))?]'
              echo ""
              echo "wait_name_filter"
              echo "$runData" | jq \
              --arg name "${{ inputs.wait_name_filter }}" \
              '$name'
              echo ""
              echo "runData.name.contains(Build):"
              echo "$runData" | jq \
              --arg name "${{ inputs.wait_name_filter }}" \
              '[.[] | select(.name | contains($name))?]'
            FI
          fi
          
          # case "${{ inputs.goal }}" in
          #   success) 
          #     if [ "${{ inputs.debug }}" = "true" ] ; then
          #       echo "running success check"
          #     fi
          #     isFinished=$(echo ${runData} | jq  -c \
          #     --arg startTime "${{ steps.set_values.outputs.startTime }}" \
          #     --arg ref "${{ inputs.ref }}" \
          #     --arg name "${{ inputs.wait_name_filter }}" \
          #     '[.[] | select(.createdAt >= $startTime and .conclusion == "success" and .headBranch == $ref)?] | length')
          #     ;;
          #   complete) 
          #     if [ "${{ inputs.debug }}" = "true" ] ; then
          #       echo "running success check"
          #     fi
          #     isFinished=$(echo ${runData} | jq  -c \
          #     --arg startTime "${{ steps.set_values.outputs.startTime }}" \
          #     --arg ref "${{ inputs.ref }}" \
          #     --arg name "${{ inputs.wait_name_filter }}" \
          #     '[.[] | select(.createdAt >= $startTime and .status == "completed" and .headBranch == $ref)?] | length')
          #     ;;
          # esac

          # if [ "${{ inputs.debug }}" = "true" ] ; then
          #   echo "isFinished: $isFinished"
          # fi
        done

        # isSucccessful=$(echo ${runData} | jq  -c \
        # '[.[] | select(.conclusion == "success")?] | length')

        # if [ "${{ inputs.debug }}" = "true" ] ; then
        #   echo "isSucccessful: $isSucccessful"
        # fi

        # url=$(echo ${runData} | jq  -c '.[0].url')
        # echo "Url of run: ${url}"

        # if [ $isSucccessful -gt 0 ] ; then
        #   echo "Workflow Completed Sucessfully"
        # else
        #   echo "*** Workflow Completed With Errors ****"
        #   # TODO Add an option to fail this workflow if the child workflow failed
        # fi